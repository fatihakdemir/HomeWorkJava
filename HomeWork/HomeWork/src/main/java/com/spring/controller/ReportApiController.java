package com.spring.controller;import com.spring.api.service.ReportService;import com.spring.api.service.domain.Authorization;import com.spring.api.service.domain.CustomerInfo;import com.spring.api.service.domain.Merchant;import com.spring.api.service.domain.Reports;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.format.annotation.DateTimeFormat;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import java.util.List;import java.util.Optional;@Controllerpublic class ReportApiController {    @Autowired    private ReportService reportService;    @RequestMapping(value = "/login",method = RequestMethod.GET)    public ResponseEntity beLogin(@RequestParam("email") String email, @RequestParam("password")String password){        Optional<Authorization> auth = reportService.login(email, password);        if (auth.isPresent()){            return ResponseEntity.ok(auth.get());        }        return ResponseEntity.badRequest().build();    }    @RequestMapping(value = "/reports",method = RequestMethod.GET)    public ResponseEntity beLogin(            @RequestParam("fromDate")@DateTimeFormat(pattern = "YYYY-MM-DD") String fromDate,            @RequestParam("toDate")@DateTimeFormat(pattern = "YYYY-MM-DD")String toDate,            @RequestParam(value = "merchant",required = false) Integer merchant,            @RequestParam(value = "acquirer",required = false) Integer acquirer){        Integer newMerchant = Optional.ofNullable(merchant).orElse(0);        Integer newAcquirer = Optional.ofNullable(acquirer).orElse(0);        Optional<Reports> reports = reportService.getReports(fromDate, toDate, newMerchant, newAcquirer);        if (reports.isPresent()){            return ResponseEntity.ok(reports.get());        }        return ResponseEntity.badRequest().build();    }    @RequestMapping(value = "/client",method = RequestMethod.GET)    public ResponseEntity getClient(@RequestParam String transactionId) {        List<CustomerInfo> client = reportService.getClient(transactionId);        return ResponseEntity.ok(client);    }    @RequestMapping(value = "/merchant",method = RequestMethod.GET)    public ResponseEntity getMerchant(@RequestParam String transactionId) {        List<Merchant> merchant = reportService.getMerchant(transactionId);        return ResponseEntity.ok(merchant);    }}